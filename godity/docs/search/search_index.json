{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Godity Documentation Use the left menu to navigate.","title":"Home"},{"location":"#welcome-to-godity-documentation","text":"Use the left menu to navigate.","title":"Welcome to Godity Documentation"},{"location":"components/","text":"Components Animation __init__(name : str, image_name : str, area_list : list, |OPTIONAL| frame_delay : float <0>, delay_list : list <None>, auto_play : bool <False>) Variables image_name : str area_list : list frame_delay : float delay_list : list Methods run() pause() restart() getFrame() -> float getState() -> str getArea() -> tuple BoxCollider __init__(width : int, height : int, |OPTIONAL| ghost : bool <False>, is_platform : bool <False>) Variables width : int height : int ghost : bool is_platform : bool collide_objects : dict Methods checkCollision(axis : str) Camera __init__(screen_width : int, screen_height : int, |OPTIONAL|, offset_x : int <0>, offset_y : int <0>, max_width : int <0>, max_height : int <0>) Variables screen_width : int screen_height : int offset_x : int offset_y : int max_width : int max_height : int Methods apply(rect : pygame.Rect) Light __init__(app : godity.core.App, radius : int, |OPTIONAL| color : tuple <(255,255,255)>, image_name : str <None>, follow_camera : bool <True>, smooth_scale : bool <False>) Variables radius : int color : tuple image_name : str follow_camera : bool smooth_scale : bool Methods getDrawImage() -> list [pygame.Surface, pygame.Rect] Rigidbody __init__(app, |OPTIONAL| velocity : float <2>, mass : float <3>, use_gravity : bool <True>, drop_platform_key : int <pygame.K_DOWN>) Variables air_time : float velocity : float mass : float use_gravity : bool drop_platform_key : int direction : godity.math.Vector2 gravity : float <0> on_ground : bool is_jumping : bool platform_drop : bool Methods move() jump(force : float) SpriteRenderer __init__(app : godity.core.App, image_name : str, |OPTIONAL| area : tuple <None>, tile_width : int <0>, tile_height : int <0>, offset_x : int <0>, offset_y : int <0>, flip_x : bool <False>, flip_y : bool <False>, smooth_scale : bool <False>, follow_camera : bool <True>) Variables image_name : str area : tuple tile_width : int tile_height : int offset_x : int offset_y : int flip_x : bool flip_y : bool smooth_scale : bool follow_camera : bool rect : pygame.Rect Methods updateRect() setArea(area : tuple) setFlip(x : bool, y : bool) setImage(image_path : str, |OPTIONAL| convert_alpha : False) getDrawImage() -> list [pygame.Surface, pygame.Rect] Tilemap __init__(file_path : str, |OPTIONAL| object_offset_x : int <0>, object_offset_y : int <0>) Variables tmx_data : pytmx.pytmx.TiledMap width : int height : int object_offset_x : int object_offset_y : int image : pygame.Surface Methods getDrawImage() -> list [pygame.Surface, pygame.Rect] Transform __init__(|OPTIONAL| position : godity.math.Vector2 <None>, scale : godity.math.Vector2 <None>, rotation : int <0>) Variables position : godity.math.Vector2 scale : godity.math.Vector2 rotation : int Methods move(vector2 : godity.math.Vector2) rotate(angle : int) setRotation(vector2 : godity.math.Vector2) setPosition(vector2 : godity.math.Vector2) setPositionX(value : float) setPositionY(value : float) setScale(vector2 : godity.math.Vector2) setScaleX(value : float) setScaleY(value : float) updateChildrenPosition()","title":"Components"},{"location":"components/#components","text":"","title":"Components"},{"location":"components/#animation","text":"__init__(name : str, image_name : str, area_list : list, |OPTIONAL| frame_delay : float <0>, delay_list : list <None>, auto_play : bool <False>)","title":"Animation"},{"location":"components/#variables","text":"image_name : str area_list : list frame_delay : float delay_list : list","title":"Variables"},{"location":"components/#methods","text":"run() pause() restart() getFrame() -> float getState() -> str getArea() -> tuple","title":"Methods"},{"location":"components/#boxcollider","text":"__init__(width : int, height : int, |OPTIONAL| ghost : bool <False>, is_platform : bool <False>)","title":"BoxCollider"},{"location":"components/#variables_1","text":"width : int height : int ghost : bool is_platform : bool collide_objects : dict","title":"Variables"},{"location":"components/#methods_1","text":"checkCollision(axis : str)","title":"Methods"},{"location":"components/#camera","text":"__init__(screen_width : int, screen_height : int, |OPTIONAL|, offset_x : int <0>, offset_y : int <0>, max_width : int <0>, max_height : int <0>)","title":"Camera"},{"location":"components/#variables_2","text":"screen_width : int screen_height : int offset_x : int offset_y : int max_width : int max_height : int","title":"Variables"},{"location":"components/#methods_2","text":"apply(rect : pygame.Rect)","title":"Methods"},{"location":"components/#light","text":"__init__(app : godity.core.App, radius : int, |OPTIONAL| color : tuple <(255,255,255)>, image_name : str <None>, follow_camera : bool <True>, smooth_scale : bool <False>)","title":"Light"},{"location":"components/#variables_3","text":"radius : int color : tuple image_name : str follow_camera : bool smooth_scale : bool","title":"Variables"},{"location":"components/#methods_3","text":"getDrawImage() -> list [pygame.Surface, pygame.Rect]","title":"Methods"},{"location":"components/#rigidbody","text":"__init__(app, |OPTIONAL| velocity : float <2>, mass : float <3>, use_gravity : bool <True>, drop_platform_key : int <pygame.K_DOWN>)","title":"Rigidbody"},{"location":"components/#variables_4","text":"air_time : float velocity : float mass : float use_gravity : bool drop_platform_key : int direction : godity.math.Vector2 gravity : float <0> on_ground : bool is_jumping : bool platform_drop : bool","title":"Variables"},{"location":"components/#methods_4","text":"move() jump(force : float)","title":"Methods"},{"location":"components/#spriterenderer","text":"__init__(app : godity.core.App, image_name : str, |OPTIONAL| area : tuple <None>, tile_width : int <0>, tile_height : int <0>, offset_x : int <0>, offset_y : int <0>, flip_x : bool <False>, flip_y : bool <False>, smooth_scale : bool <False>, follow_camera : bool <True>)","title":"SpriteRenderer"},{"location":"components/#variables_5","text":"image_name : str area : tuple tile_width : int tile_height : int offset_x : int offset_y : int flip_x : bool flip_y : bool smooth_scale : bool follow_camera : bool rect : pygame.Rect","title":"Variables"},{"location":"components/#methods_5","text":"updateRect() setArea(area : tuple) setFlip(x : bool, y : bool) setImage(image_path : str, |OPTIONAL| convert_alpha : False) getDrawImage() -> list [pygame.Surface, pygame.Rect]","title":"Methods"},{"location":"components/#tilemap","text":"__init__(file_path : str, |OPTIONAL| object_offset_x : int <0>, object_offset_y : int <0>)","title":"Tilemap"},{"location":"components/#variables_6","text":"tmx_data : pytmx.pytmx.TiledMap width : int height : int object_offset_x : int object_offset_y : int image : pygame.Surface","title":"Variables"},{"location":"components/#methods_6","text":"getDrawImage() -> list [pygame.Surface, pygame.Rect]","title":"Methods"},{"location":"components/#transform","text":"__init__(|OPTIONAL| position : godity.math.Vector2 <None>, scale : godity.math.Vector2 <None>, rotation : int <0>)","title":"Transform"},{"location":"components/#variables_7","text":"position : godity.math.Vector2 scale : godity.math.Vector2 rotation : int","title":"Variables"},{"location":"components/#methods_7","text":"move(vector2 : godity.math.Vector2) rotate(angle : int) setRotation(vector2 : godity.math.Vector2) setPosition(vector2 : godity.math.Vector2) setPositionX(value : float) setPositionY(value : float) setScale(vector2 : godity.math.Vector2) setScaleX(value : float) setScaleY(value : float) updateChildrenPosition()","title":"Methods"},{"location":"core/","text":"Core App __init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>, fps : float <60>, exit_key : int <pygame.K_ESCAPE>) Variables gravity : float <9.807> physics_color : tuple <(255,255,255)> exit_key : int window : godity.core.Window Methods #overwrite methods start() update() render() end() loadImage(name : str, path : str, |OPTIONAL| convert_alpha : bool <False>) getImage(name : str) -> pygame.Surface updateImage(name : str, path : str, |OPTIONAL| convert_alpha : bool <False>) deleteImage(name : str) loadAudio(name : str, path : str) getAudio(name : str) -> pygame.mixer.Sound playAudio(name : str) stopAudio(name : str) deleteAudio(name : str) getEvents() -> list getClock() -> pygame.time.Clock() getFlags() -> int getDeltaTime() -> float getScene() -> godity.core.Scene setFps(value : float) close() run() Component __init__(name : str, args : dict) Variables name : str args : dict entity : godity.core.Entity <None> Methods start() update() Entity __init__(name : str) Variables name : str childrens : list layer : godity.core.Layer <None> Scene : godity.core.Scene <None> Methods add(component : godity.core.Component) remove(component : str) has(component : str) get(component : str) addTag(name : str) removeTag(name : str) hasTag(name : str) parent(entity : godity.core.Entity, |OPTIONAL| offset_x : int <0>, offset_y : int <0>) clearParent() getChildrens() getLayer() getScene() update() end() Layer __init__(name : str) Variables name : str Methods add(entity : godity.core.Entity) remove(entity : str) getEntities() -> list getEntitiesWithComponent(component : str) -> list Scene __init__(app : godity.core.App, name : str, surface_width : int, surface_height : int, |OPTIONAL| adjust_surface : bool <True>, render_physics : bool <False>, environment_light : tuple <(255,255,255)>, max_surface_width : int <None>, max_surface_height : int <None>) Variables name : str render_physics : bool environment_light : tuple background_color : tuple <(0,0,0)> Methods addLayer(layer : godity.core.Layer) removeLayer(layer : str) add(entity : godity.core.Entity, layer : godity.core.Layer) remove(entity : str, layer : str) get(entity : str) -> godity.core.Entity getEntities() -> list getEntitiesWithComponent(component : str) -> list getSurface() -> pygame.Surface getCamera() -> godity.core.Entity setCamera(entity : godity.core.Entity) # the entity must have a camera component. isRendering() -> bool isUpdating() -> bool render() update() Timer __init__() Variables last_time : float Methods getTime() -> float resetTime() Window __init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>) Variables width : int height : int title : str flags : int Methods getDisplay() -> pygame.Surface clearColor(color : tuple) update()","title":"Core"},{"location":"core/#core","text":"","title":"Core"},{"location":"core/#app","text":"__init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>, fps : float <60>, exit_key : int <pygame.K_ESCAPE>)","title":"App"},{"location":"core/#variables","text":"gravity : float <9.807> physics_color : tuple <(255,255,255)> exit_key : int window : godity.core.Window","title":"Variables"},{"location":"core/#methods","text":"#overwrite methods start() update() render() end() loadImage(name : str, path : str, |OPTIONAL| convert_alpha : bool <False>) getImage(name : str) -> pygame.Surface updateImage(name : str, path : str, |OPTIONAL| convert_alpha : bool <False>) deleteImage(name : str) loadAudio(name : str, path : str) getAudio(name : str) -> pygame.mixer.Sound playAudio(name : str) stopAudio(name : str) deleteAudio(name : str) getEvents() -> list getClock() -> pygame.time.Clock() getFlags() -> int getDeltaTime() -> float getScene() -> godity.core.Scene setFps(value : float) close() run()","title":"Methods"},{"location":"core/#component","text":"__init__(name : str, args : dict)","title":"Component"},{"location":"core/#variables_1","text":"name : str args : dict entity : godity.core.Entity <None>","title":"Variables"},{"location":"core/#methods_1","text":"start() update()","title":"Methods"},{"location":"core/#entity","text":"__init__(name : str)","title":"Entity"},{"location":"core/#variables_2","text":"name : str childrens : list layer : godity.core.Layer <None> Scene : godity.core.Scene <None>","title":"Variables"},{"location":"core/#methods_2","text":"add(component : godity.core.Component) remove(component : str) has(component : str) get(component : str) addTag(name : str) removeTag(name : str) hasTag(name : str) parent(entity : godity.core.Entity, |OPTIONAL| offset_x : int <0>, offset_y : int <0>) clearParent() getChildrens() getLayer() getScene() update() end()","title":"Methods"},{"location":"core/#layer","text":"__init__(name : str)","title":"Layer"},{"location":"core/#variables_3","text":"name : str","title":"Variables"},{"location":"core/#methods_3","text":"add(entity : godity.core.Entity) remove(entity : str) getEntities() -> list getEntitiesWithComponent(component : str) -> list","title":"Methods"},{"location":"core/#scene","text":"__init__(app : godity.core.App, name : str, surface_width : int, surface_height : int, |OPTIONAL| adjust_surface : bool <True>, render_physics : bool <False>, environment_light : tuple <(255,255,255)>, max_surface_width : int <None>, max_surface_height : int <None>)","title":"Scene"},{"location":"core/#variables_4","text":"name : str render_physics : bool environment_light : tuple background_color : tuple <(0,0,0)>","title":"Variables"},{"location":"core/#methods_4","text":"addLayer(layer : godity.core.Layer) removeLayer(layer : str) add(entity : godity.core.Entity, layer : godity.core.Layer) remove(entity : str, layer : str) get(entity : str) -> godity.core.Entity getEntities() -> list getEntitiesWithComponent(component : str) -> list getSurface() -> pygame.Surface getCamera() -> godity.core.Entity setCamera(entity : godity.core.Entity) # the entity must have a camera component. isRendering() -> bool isUpdating() -> bool render() update()","title":"Methods"},{"location":"core/#timer","text":"__init__()","title":"Timer"},{"location":"core/#variables_5","text":"last_time : float","title":"Variables"},{"location":"core/#methods_5","text":"getTime() -> float resetTime()","title":"Methods"},{"location":"core/#window","text":"__init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>)","title":"Window"},{"location":"core/#variables_6","text":"width : int height : int title : str flags : int","title":"Variables"},{"location":"core/#methods_6","text":"getDisplay() -> pygame.Surface clearColor(color : tuple) update()","title":"Methods"},{"location":"general/","text":"General Engine Functions getMonitorSize() -> tuple Inputs Functions keyPressed(key : str) -> bool mousePressed(button : str) -> bool","title":"General"},{"location":"general/#general","text":"","title":"General"},{"location":"general/#engine","text":"","title":"Engine"},{"location":"general/#functions","text":"getMonitorSize() -> tuple","title":"Functions"},{"location":"general/#inputs","text":"","title":"Inputs"},{"location":"general/#functions_1","text":"keyPressed(key : str) -> bool mousePressed(button : str) -> bool","title":"Functions"},{"location":"math/","text":"Math Vector2 __init__(|OPTIONAL| x : float <0>, y : float <0>) Variables x : float y : float Methods add(vector2 : godity.math.Vector2) -> godity.math.Vector2 subtract(vector2 : godity.math.Vector2) -> godity.math.Vector2 multiply(scalar : float) -> godity.math.Vector2 divide(scalar : float) -> godity.math.Vector2 length() -> float lengthSquared() -> float normalize() -> godity.math.Vector2 isNormalized() -> bool dot(vector2 : godity.math.Vector2) -> float cross(vector2 : godity.math.Vector2) -> float lerp(vector2 : godity.math.Vector2, value : float) -> godity.math.Vector2 rotate(degrees : int) -> godity.math.Vector2 rotateRad(radians : int) -> godity.math.Vector2 getDistanceTo(vector2 : godity.math.Vector2) -> godity.math.Vector2 copy() -> godity.math.Vector2","title":"Math"},{"location":"math/#math","text":"","title":"Math"},{"location":"math/#vector2","text":"__init__(|OPTIONAL| x : float <0>, y : float <0>)","title":"Vector2"},{"location":"math/#variables","text":"x : float y : float","title":"Variables"},{"location":"math/#methods","text":"add(vector2 : godity.math.Vector2) -> godity.math.Vector2 subtract(vector2 : godity.math.Vector2) -> godity.math.Vector2 multiply(scalar : float) -> godity.math.Vector2 divide(scalar : float) -> godity.math.Vector2 length() -> float lengthSquared() -> float normalize() -> godity.math.Vector2 isNormalized() -> bool dot(vector2 : godity.math.Vector2) -> float cross(vector2 : godity.math.Vector2) -> float lerp(vector2 : godity.math.Vector2, value : float) -> godity.math.Vector2 rotate(degrees : int) -> godity.math.Vector2 rotateRad(radians : int) -> godity.math.Vector2 getDistanceTo(vector2 : godity.math.Vector2) -> godity.math.Vector2 copy() -> godity.math.Vector2","title":"Methods"},{"location":"notes/","text":"Release 0.9 New parameter in sprite renderer component. New parameters in the Scene class. New parameters in the Camera component. New methods in the Scene class. New method in Animation component. New parameters in the Animation component. The attribute collide_objects of component BoxCollider is now a dict. The parameter frame_delay of Animation component does not longer obligatory. New class, Layer implemented in the core. The box_collider and platform objects inserted by Tiled now have a tag with their respective names. The updateChildrenPosition method parameters of the Transform component have been removed. New component Light. New methods in Entity class. The parent method of the Entity class has two new parameters. New methods in Vector2 class. Removed the alpha_background parameter of the Tilemap component, maps with a transparent background are now automatically recognized. New parameters in Tilemap component. The method add of Scene class have a new obligatory parameter called layer. Solved the bug of sprite sheets that were giving bugs of transparency with the color (0,0,0). Rotation of sprites that were buggy has been fixed. It is now possible to create layers and place them in any scene.","title":"Release Notes"},{"location":"notes/#release-09","text":"New parameter in sprite renderer component. New parameters in the Scene class. New parameters in the Camera component. New methods in the Scene class. New method in Animation component. New parameters in the Animation component. The attribute collide_objects of component BoxCollider is now a dict. The parameter frame_delay of Animation component does not longer obligatory. New class, Layer implemented in the core. The box_collider and platform objects inserted by Tiled now have a tag with their respective names. The updateChildrenPosition method parameters of the Transform component have been removed. New component Light. New methods in Entity class. The parent method of the Entity class has two new parameters. New methods in Vector2 class. Removed the alpha_background parameter of the Tilemap component, maps with a transparent background are now automatically recognized. New parameters in Tilemap component. The method add of Scene class have a new obligatory parameter called layer. Solved the bug of sprite sheets that were giving bugs of transparency with the color (0,0,0). Rotation of sprites that were buggy has been fixed. It is now possible to create layers and place them in any scene.","title":"Release 0.9"}]}