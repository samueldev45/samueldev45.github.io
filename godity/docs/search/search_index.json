{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Godity Engine Documentation Use the left menu to navigate.","title":"Home"},{"location":"#welcome-to-godity-engine-documentation","text":"Use the left menu to navigate.","title":"Welcome to Godity Engine Documentation"},{"location":"components/","text":"Components Transform __init__(|OPTIONAL| position : godity.math.Vector2 <None>, scale : godity.math.Vector2 <None>, rotation : int <0>) Variables position : godity.math.Vector2 scale : godity.math.Vector2 rotation : int Methods start() move(vector2 : godity.math.Vector2) rotate(angle : int) setPosition(vector2 : godity.math.Vector2) setPositionX(value : int) setPositionY(value : int) setRotation(angle : int) setScale(vector2 : godity.math.Vector2) setScaleX(value : int) setScaleY(value : int) updateChildrenPosition(|OPTIONAL| offset_x : int <0>, offset_y : int <0>) update() Sprite Renderer __init__(app : godity.core.App, image_name : str) Variables image_name : str rect : pygame.Rect Methods start() updateRect() getDrawImage() -> list[pygame.Surface, pygame.Rect] update() Box Collider __init__(width : int, height : int) Variables width : int height : int Methods start() checkCollision(axis : str) update() Rigidbody __init__(app : godity.core.App, |OPTIONAL| velocity : float <2>, mass : float <1>, use_gravity : bool <True>) Variables velocity : float mass : float use_gravity : bool gravity : bool <0> direction : godity.math.Vector2 Methods start() move() update() Camera __init__(screen_width : int, screen_height : int, |OPTIONAL| offset_x : int <0>, offset_y : int <0>) Variables screen_width = int screen_height = int offset_x = int offset_y = int Methods start() apply(rect : pygame.Rect) update()","title":"Components"},{"location":"components/#components","text":"","title":"Components"},{"location":"components/#transform","text":"__init__(|OPTIONAL| position : godity.math.Vector2 <None>, scale : godity.math.Vector2 <None>, rotation : int <0>)","title":"Transform"},{"location":"components/#variables","text":"position : godity.math.Vector2 scale : godity.math.Vector2 rotation : int","title":"Variables"},{"location":"components/#methods","text":"start() move(vector2 : godity.math.Vector2) rotate(angle : int) setPosition(vector2 : godity.math.Vector2) setPositionX(value : int) setPositionY(value : int) setRotation(angle : int) setScale(vector2 : godity.math.Vector2) setScaleX(value : int) setScaleY(value : int) updateChildrenPosition(|OPTIONAL| offset_x : int <0>, offset_y : int <0>) update()","title":"Methods"},{"location":"components/#sprite-renderer","text":"__init__(app : godity.core.App, image_name : str)","title":"Sprite Renderer"},{"location":"components/#variables_1","text":"image_name : str rect : pygame.Rect","title":"Variables"},{"location":"components/#methods_1","text":"start() updateRect() getDrawImage() -> list[pygame.Surface, pygame.Rect] update()","title":"Methods"},{"location":"components/#box-collider","text":"__init__(width : int, height : int)","title":"Box Collider"},{"location":"components/#variables_2","text":"width : int height : int","title":"Variables"},{"location":"components/#methods_2","text":"start() checkCollision(axis : str) update()","title":"Methods"},{"location":"components/#rigidbody","text":"__init__(app : godity.core.App, |OPTIONAL| velocity : float <2>, mass : float <1>, use_gravity : bool <True>)","title":"Rigidbody"},{"location":"components/#variables_3","text":"velocity : float mass : float use_gravity : bool gravity : bool <0> direction : godity.math.Vector2","title":"Variables"},{"location":"components/#methods_3","text":"start() move() update()","title":"Methods"},{"location":"components/#camera","text":"__init__(screen_width : int, screen_height : int, |OPTIONAL| offset_x : int <0>, offset_y : int <0>)","title":"Camera"},{"location":"components/#variables_4","text":"screen_width = int screen_height = int offset_x = int offset_y = int","title":"Variables"},{"location":"components/#methods_4","text":"start() apply(rect : pygame.Rect) update()","title":"Methods"},{"location":"core/","text":"Core App __init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>, fps : float <60>) Variables gravity : float <9.807> window : godity.core.Window Methods # overwrite functions start() update() render() end() loadImage(name : str, path : str) loadAudio(name : str, path : str) getImage(name : str) -> pygame.Surface getAudio(name : str) -> pygame.mixer.Sound deleteImage(name : str) deleteAudio(name : str) playAudio(name : str) stopAudio(name : str) getEvents() -> list[] of events getClock() -> pygame.time.Clock getDeltaTime() -> float getScene() -> godity.core.Scene setScene(scene : godity.core.Scene) setFPS(value : float) close() run() Component __init__(name : str, args : dict) Variables name : str args : dict entity : godity.core.Entity <None> Methods #overwrite methods start() update() Entity __init__(name : str) Variables name : str childrens : list scene : godity.core.Scene <None> Methods add(component : godity.core.Component) addTag(name : str) remove(component : str) removeTag(name : str) has(component : str) -> bool hasTag(name : str) -> bool get(component : str) -> godity.core.Component getChildrens() -> list[] of godity.core.Entity getScene() -> godity.core.Scene parent(entity : godity.core.Entity) update() Scene __init__(name : str, |OPTIONAL| render_physics : bool <False>) Variables name : str render_physics : bool Methods add(entity : godity.core.Entity) remove(entity : godity.core.Entity) get(entity : str) -> godity.core.Entity getEntities() -> list[] of godity.core.Entity getEntitiesWithComponent(component : str) -> list[] of godity.core.Entity getCamera() -> godity.core.Entity setCamera(entity : godity.core.Entity) # the entity must have a camera component. isRendering() -> bool isUpdating() -> bool render(surface : pygame.Surface) update() Window __init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>) Variables width : int height : int title : str flags : int <0> Methods getDisplay() -> pygame.Surface clearColor(color : tuple) update()","title":"Core"},{"location":"core/#core","text":"","title":"Core"},{"location":"core/#app","text":"__init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>, fps : float <60>)","title":"App"},{"location":"core/#variables","text":"gravity : float <9.807> window : godity.core.Window","title":"Variables"},{"location":"core/#methods","text":"# overwrite functions start() update() render() end() loadImage(name : str, path : str) loadAudio(name : str, path : str) getImage(name : str) -> pygame.Surface getAudio(name : str) -> pygame.mixer.Sound deleteImage(name : str) deleteAudio(name : str) playAudio(name : str) stopAudio(name : str) getEvents() -> list[] of events getClock() -> pygame.time.Clock getDeltaTime() -> float getScene() -> godity.core.Scene setScene(scene : godity.core.Scene) setFPS(value : float) close() run()","title":"Methods"},{"location":"core/#component","text":"__init__(name : str, args : dict)","title":"Component"},{"location":"core/#variables_1","text":"name : str args : dict entity : godity.core.Entity <None>","title":"Variables"},{"location":"core/#methods_1","text":"#overwrite methods start() update()","title":"Methods"},{"location":"core/#entity","text":"__init__(name : str)","title":"Entity"},{"location":"core/#variables_2","text":"name : str childrens : list scene : godity.core.Scene <None>","title":"Variables"},{"location":"core/#methods_2","text":"add(component : godity.core.Component) addTag(name : str) remove(component : str) removeTag(name : str) has(component : str) -> bool hasTag(name : str) -> bool get(component : str) -> godity.core.Component getChildrens() -> list[] of godity.core.Entity getScene() -> godity.core.Scene parent(entity : godity.core.Entity) update()","title":"Methods"},{"location":"core/#scene","text":"__init__(name : str, |OPTIONAL| render_physics : bool <False>)","title":"Scene"},{"location":"core/#variables_3","text":"name : str render_physics : bool","title":"Variables"},{"location":"core/#methods_3","text":"add(entity : godity.core.Entity) remove(entity : godity.core.Entity) get(entity : str) -> godity.core.Entity getEntities() -> list[] of godity.core.Entity getEntitiesWithComponent(component : str) -> list[] of godity.core.Entity getCamera() -> godity.core.Entity setCamera(entity : godity.core.Entity) # the entity must have a camera component. isRendering() -> bool isUpdating() -> bool render(surface : pygame.Surface) update()","title":"Methods"},{"location":"core/#window","text":"__init__(width : int, height : int, title : str, |OPTIONAL| flags : int <0>)","title":"Window"},{"location":"core/#variables_4","text":"width : int height : int title : str flags : int <0>","title":"Variables"},{"location":"core/#methods_4","text":"getDisplay() -> pygame.Surface clearColor(color : tuple) update()","title":"Methods"},{"location":"math/","text":"Math Vector2 __init__(|OPTIONAL| x : int | float <0>, y : int | float <0>) Variables x : int | float y : int | float Methods add(vector2 : godity.math.Vector2) -> godity.math.Vector2() subtract(vector2 : godity.math.Vector2) -> godity.math.Vector2() multiply(scalar : int | float) -> godity.math.Vector2() divide(scalar : int | float) -> godity.math.Vector2() length() -> float normalize() -> godity.math.Vector2() copy() -> godity.math.Vector2()","title":"Math"},{"location":"math/#math","text":"","title":"Math"},{"location":"math/#vector2","text":"__init__(|OPTIONAL| x : int | float <0>, y : int | float <0>)","title":"Vector2"},{"location":"math/#variables","text":"x : int | float y : int | float","title":"Variables"},{"location":"math/#methods","text":"add(vector2 : godity.math.Vector2) -> godity.math.Vector2() subtract(vector2 : godity.math.Vector2) -> godity.math.Vector2() multiply(scalar : int | float) -> godity.math.Vector2() divide(scalar : int | float) -> godity.math.Vector2() length() -> float normalize() -> godity.math.Vector2() copy() -> godity.math.Vector2()","title":"Methods"},{"location":"notes/","text":"Release 0.2 New functions in Scene class. New functions in Entity class. New functions in App class. New function in Transform component. Physics implemented. The scene class has a new parameter for drawing physics (render_physics=False). New components: Camera Box Collider Rigidbody","title":"Release Notes"},{"location":"notes/#release-02","text":"New functions in Scene class. New functions in Entity class. New functions in App class. New function in Transform component. Physics implemented. The scene class has a new parameter for drawing physics (render_physics=False). New components: Camera Box Collider Rigidbody","title":"Release 0.2"}]}